diff --git a/dist/build/webpack-config.js b/dist/build/webpack-config.js
index a7bc7e44663d8abaef4e5ea27bba601ccee78b07..ba1297f0554fd68bda253dff85205608b8eedc27 100644
--- a/dist/build/webpack-config.js
+++ b/dist/build/webpack-config.js
@@ -17,7 +17,7 @@ const isLikeServerless=isServerless||isServerlessTrace;const outputDir=isLikeSer
 'main.js':[],[_constants2.CLIENT_STATIC_FILES_RUNTIME_MAIN]:`./`+_path.default.relative(dir,_path.default.join(_constants.NEXT_PROJECT_ROOT_DIST_CLIENT,dev?`next-dev.js`:'next.js')).replace(/\\/g,'/'),[_constants2.CLIENT_STATIC_FILES_RUNTIME_POLYFILLS]:_path.default.join(_constants.NEXT_PROJECT_ROOT_DIST_CLIENT,'polyfills.js')}:undefined;let typeScriptPath;try{typeScriptPath=require.resolve('typescript',{paths:[dir]});}catch(_){}const tsConfigPath=_path.default.join(dir,'tsconfig.json');const useTypeScript=Boolean(typeScriptPath&&(await(0,_fileExists.fileExists)(tsConfigPath)));let jsConfig;// jsconfig is a subset of tsconfig
 if(useTypeScript){const ts=await Promise.resolve(`${typeScriptPath}`).then(s=>_interopRequireWildcard(require(s)));const tsConfig=await(0,_getTypeScriptConfiguration.getTypeScriptConfiguration)(ts,tsConfigPath);jsConfig={compilerOptions:tsConfig.options};}const jsConfigPath=_path.default.join(dir,'jsconfig.json');if(!useTypeScript&&(await(0,_fileExists.fileExists)(jsConfigPath))){jsConfig=parseJsonFile(jsConfigPath);}let resolvedBaseUrl;if((_jsConfig=jsConfig)!=null&&(_jsConfig$compilerOpt=_jsConfig.compilerOptions)!=null&&_jsConfig$compilerOpt.baseUrl){resolvedBaseUrl=_path.default.resolve(dir,jsConfig.compilerOptions.baseUrl);}function getReactProfilingInProduction(){if(reactProductionProfiling){return{'react-dom$':'react-dom/profiling','scheduler/tracing':'scheduler/tracing-profiling'};}}const clientResolveRewrites=require.resolve('next/dist/next-server/lib/router/utils/resolve-rewrites');const clientResolveRewritesNoop=require.resolve('next/dist/next-server/lib/router/utils/resolve-rewrites-noop');const resolveConfig={// Disable .mjs for node_modules bundling
 extensions:isServer?['.js','.mjs',...(useTypeScript?['.tsx','.ts']:[]),'.jsx','.json','.wasm']:['.mjs','.js',...(useTypeScript?['.tsx','.ts']:[]),'.jsx','.json','.wasm'],modules:['node_modules',...nodePathList// Support for NODE_PATH environment variable
-],alias:{next:_constants.NEXT_PROJECT_ROOT,...(_webpack.isWebpack5&&!isServer?{stream:require.resolve('stream-browserify'),path:require.resolve('path-browserify'),crypto:require.resolve('crypto-browserify'),buffer:require.resolve('buffer'),vm:require.resolve('vm-browserify')}:undefined),[_constants.PAGES_DIR_ALIAS]:pagesDir,[_constants.DOT_NEXT_ALIAS]:distDir,...getOptimizedAliases(isServer),...getReactProfilingInProduction(),[clientResolveRewrites]:hasRewrites?clientResolveRewrites:clientResolveRewritesNoop},mainFields:isServer?['main','module']:['browser','module','main'],plugins:_webpack.isWebpack5?// webpack 5+ has the PnP resolver built-in by default:
+],alias:{next:_constants.NEXT_PROJECT_ROOT,...(_webpack.isWebpack5&&!isServer?{stream:require.resolve('stream-browserify'),path:require.resolve('path-browserify'),crypto:require.resolve('crypto-browserify'),buffer:require.resolve('buffer'),vm:require.resolve('vm-browserify'),process:require.resolve('process/package.json')}:undefined),[_constants.PAGES_DIR_ALIAS]:pagesDir,[_constants.DOT_NEXT_ALIAS]:distDir,...getOptimizedAliases(isServer),...getReactProfilingInProduction(),[clientResolveRewrites]:hasRewrites?clientResolveRewrites:clientResolveRewritesNoop},mainFields:isServer?['main','module']:['browser','module','main'],plugins:_webpack.isWebpack5?// webpack 5+ has the PnP resolver built-in by default:
 []:[require('pnp-webpack-plugin')]};const terserOptions={parse:{ecma:8},compress:{ecma:5,warnings:false,// The following two options are known to break valid JavaScript code
 comparisons:false,inline:2// https://github.com/vercel/next.js/issues/7178#issuecomment-493048965
 },mangle:{safari10:true},output:{ecma:5,safari10:true,comments:false,// Fixes usage of Emoji and certain Regex
